import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class TestBench {

	public static Object testAlgorithm(String className, String methodName, int n) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		Object obj = null;
		try {
			obj = Class.forName(className).getDeclaredConstructor().newInstance();
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
				| NoSuchMethodException | SecurityException | ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//el int.class es el tipo de carga que le pasa al metodo
		Method method = null;
		try {
			method = obj.getClass().getMethod(methodName, int.class);
		} catch (NoSuchMethodException | SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		// invoca al metodo con un objeto y con la carga y lo devuelve
		return method.invoke(obj, n);
	}
	
}
