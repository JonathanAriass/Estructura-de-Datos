
/**
 * Clase de algoritmos implementados de forma recursiva e iterativa
 * 
 * @author Jonathan Arias Busto (UO283586)
 *
 */
public class Algoritmos {

	/**
	 * Metodo factorial que calcula el factorial de un numero de forma recursiva
	 * 
	 * @param n Numero del cual se calcula el factorial
	 * @return Se devuelve un numero de tipo double siendo el resultado este
	 */
	public static double factorialRecursivo(double n) {
		doNothing();
		if (n == 0) {
			return 1;
		}
		return n*factorialRecursivo(n-1);
	}
	
	/**
	 * Metodo factorial que calcula el factorial de un numero de forma iterativa
	 * 
	 * @param n Numero del cual se calcula el factorial
	 * @return Se devuelve un numero de tipo double siendo el resultado este
	 */
	public static double factorialIterativo(double n) {
		if (n == 0) {
			return 1;
		}
		double res = 1;
		while (n != 0) {
			res = res * n;
			n--;
		}
		return res;
	}
	
	
	
	/**
	 * Metodo que calcula la potencia en base dos de n exponente de forma recursiva
	 * 
	 * Version 0
	 * 
	 * @param n Exponente de la operacion a hacer
	 * @return Devuelve el resultado de elevar a 2, n veces
	 */
	public static double potenciaRecursiva_v0(double n) {
		if (n == 0) {
			return 1;
		}
		return potenciaRecursiva_v0(n-1)*2;
	}
	
	/**
	 * Metodo que calcula la potencia en base dos de n exponente de forma recursiva
	 * 
	 * Version 1
	 * 
	 * @param n Exponente de la operacion a hacer
	 * @return Devuelve el resultado de elevar a 2, n veces
	 */
	public static double potenciaRecursiva_v1(double n) {
		if (n == 0) {
			return 1;
		}
		return (potenciaRecursiva_v0(n-1) + potenciaRecursiva_v0(n-1));
	}
	
	/**
	 * Metodo que calcula la potencia en base dos de n exponente de forma recursiva
	 * 
	 * Version 2
	 * 
	 * @param n Exponente de la operacion a hacer
	 * @return Devuelve el resultado de elevar a 2, n veces
	 */
	public static double potenciaRecursiva_v2(double n) {
		if (n == 0) {
			return 1;
		}
		if (n % 2 == 0) {
			return (potenciaRecursiva_v2(n/2) * potenciaRecursiva_v2(n/2));
		} else {
			return (potenciaRecursiva_v2(n/2) * potenciaRecursiva_v2(n/2)*2);
		}
	}
	
	
	/**
	 * Metodo que calcula la potencia en base dos de n exponente de forma iterativa
	 * 
	 * @param n Exponente de la operacion a hacer
	 * @return Devuelve el resultado de elevar a 2, n veces
	 */
	public static double potenciaIterativa(double n) {
		if (n == 0) {
			return 1;
		}
		double res = 1;
		for (double i=n;i>0;i--) {
			res = res * 2;
		}
		return res;
	}
	
	
	
	/**
	 * Metodo que calcula el numero n de la serie de fibonacci de forma recursiva
	 * 
	 * @param n Numero de la serie de fibonacci a calcular
	 * @return Numero n de la serie de fibonacci
	 */
	public static double fibonacciRecursivo(double n) {
		if (n <= 0) {
			return 0;
		}
		else if (n == 1) {
			return 1;
		}
		return fibonacciRecursivo(n-1) + fibonacciRecursivo(n-2);
	}
	
	/**
	 * Metodo que calcula el numero n de la serie de fibonacci de forma iterativa
	 * 
	 * @param n Numero de la serie de fibonacci a calcular
	 * @return Numero n de la serie de fibonacci
	 */
	public static double fibonacciIterativo(double n) {
		if (n <= 0) {
			return 0;
		}
		if (n == 1) {
			return 1;
		}
		double res = 0;
		double primero = 0;
		double segundo = 1;
		for (int i=2;i<=n;i++) {
			res = primero + segundo;
			primero = segundo;
			segundo = res;		
		}
		return res;
	}
	
	private static void doNothing() {
		try {
			Thread.sleep(250);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void linealDoNothing(int n) {
			for (int i=0;i<n;i++) {
				doNothing();
			}
	}
	
	public static void cuadraticaDoNothing(int n) {
		for (int i=0;i<n;i++) {
			for (int j=0; j<n;j++) {
				doNothing();				
			}
		}
	}
	
	public static void cubicaDoNothing(int n) {
		for (int i=0;i<n;i++) {
			for (int j=0;j<n;j++) {
				for (int k=0;k<n;k++) {
					doNothing();
				}
			}
		}
	}

	public static void logaritmicaDoNothing(int n) {
		int i = n;
		while (i > 0) {
			doNothing();
			i = i/2;
		}
	}
	
}
