import static org.junit.jupiter.api.Assertions.*;

import org.junit.Assert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class FloydTest {
	
	Graph graph1;
	Graph fullGraph;
	Graph graph;
	double INF;
	
	@BeforeEach
	void setUp() throws Exception {
		graph1 = new Graph<Integer>(5);
		graph1.addNode(1);
		graph1.addNode(2);
		graph1.addNode(3);
		graph1.addNode(4);
		graph1.addNode(5);
		graph1.addEdge(1, 2, 1);
		graph1.addEdge(1, 4, 3);
		graph1.addEdge(1, 5, 10);
		graph1.addEdge(2, 3, 5);
		graph1.addEdge(3, 5, 1);
		graph1.addEdge(4, 3, 2);
		graph1.addEdge(4, 5, 6);
		
		fullGraph = new Graph<Integer>(6);
		fullGraph.addNode(1);
		fullGraph.addNode(2);
		fullGraph.addNode(3);
		fullGraph.addNode(4);
		fullGraph.addNode(5);
		fullGraph.addNode(6);
		fullGraph.addEdge(1, 2, 3);
		fullGraph.addEdge(1, 3, 4);
		fullGraph.addEdge(1, 5, 8);
		fullGraph.addEdge(2, 5, 5);
		fullGraph.addEdge(3, 5, 3);
		fullGraph.addEdge(5, 4, 7);
		fullGraph.addEdge(5, 6, 3);
		fullGraph.addEdge(6, 4, 2);
		
		graph = new Graph<Integer>(4);
		graph.addNode(1);
		graph.addNode(2);
		graph.addNode(3);
		graph.addNode(4);
		graph.addEdge(1, 2, 3);
		graph.addEdge(2, 3, 2);
		graph.addEdge(3, 4, 4);
		
		
		INF=Double.POSITIVE_INFINITY; 
	}

	/**
	 * GIVEN un grafo completo con 6 nodos
	 * WHEN se ejecuta el algoritmo de floyd
	 * THEN se comprueba que las matrices A y P son las esperadas
	 */
	@Test
	public void floydTest1() {
		fullGraph.floyd();
		Assert.assertArrayEquals(new double[][] {{0,3,4,12,7,10},
												{INF,0,INF,10,5,8},
												{INF,INF,0,8,3,6},
												{INF,INF,INF,0,INF,INF},
												{INF,INF,INF,5,0,3},
												{INF,INF,INF,2,INF,0}},
				fullGraph.getFloydA());
		Assert.assertArrayEquals(new Object[][] {{null,null,null,6,3,5},
												{null,null,null,6,null,5},
												{null,null,null,6,null,5},
												{null,null,null,null,null,null},
												{null,null,null,6,null,null},
												{null,null,null,null,null,null},},
				fullGraph.getFloydP());
	}
	
	/**
	 * GIVEN un grafo completo con 5 nodos
	 * WHEN se ejecuta el algoritmo de floyd
	 * THEN se comprueba que las matrices A y P son las esperadas
	 */
	@Test
	public void floydTest2() {
		graph1.floyd();
		Assert.assertArrayEquals(new double[][] {{0,1,5,3,6},
												{INF,0,5,INF,6},
												{INF,INF,0,INF,1},
												{INF,INF,2,0,3},
												{INF,INF,INF,INF,0}},
				graph1.getFloydA());
		Assert.assertArrayEquals(new Object[][] {{null,null,4,null,4},
											{null,null,null,null,3},
											{null,null,null,null,null},
											{null,null,null,null,3},	
											{null,null,null,null,null},},
				graph1.getFloydP());
	}
	
	/**
	 * GIVEN un grafo completo con 6 nodos
	 * WHEN se ejecuta floyd y se ejecuta el path()
	 * THEN se comprueba que el camino devuelto es el esperado
	 */
	@Test
	public void floydPathTest1() {
		fullGraph.floyd();
		//1	(4.0)	3	(3.0)	5	(3.0)	6	(2.0)	4
		String expected = "1" +"\t" +"(4.0)" + "\t" + "3" + "\t" + "(3.0)" + "\t" + "5" + "\t" + "(3.0)" + "\t" + "6" + "\t" + "(2.0)" + "\t" + "4";
		assertEquals(expected, fullGraph.path(1, 4));
	}
	
	/**
	 * GIVEN un grafo completo con 4 nodos
	 * WHEN se ejecuta floyd y se ejecuta el path()
	 * THEN se comprueba que el camino devuelto es el esperado
	 */
	@Test
	public void floydPathTest2() {
		graph.floyd();
		//1	(3.0)	2	(2.0)	3
		String expected = "1" +"\t" +"(3.0)" + "\t" + "2" + "\t" + "(2.0)" + "\t" + "3";
		assertEquals(expected, graph.path(1, 3));
	}
	
	/**
	 * GIVEN un grafo completo con 4 nodos
	 * WHEN se ejecuta floyd y se ejecuta el path()
	 * THEN se comprueba que el camino devuelto es el esperado
	 */
	@Test
	public void floydPathTest3() {
		graph.floyd();
		//1	(3.0)	2	(2.0)	3	(4.0)	4
		String expected = "1" +"\t" +"(3.0)" + "\t" + "2" + "\t" + "(2.0)" + "\t" + "3";
		assertEquals(expected, graph.path(1, 3));
	}
	 

}
