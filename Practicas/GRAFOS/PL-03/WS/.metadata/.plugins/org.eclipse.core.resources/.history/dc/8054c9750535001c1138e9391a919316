import static org.junit.jupiter.api.Assertions.*;

import org.junit.Assert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class FloydTest {
	
	Graph graph1;
	Graph fullGraph;
	double INF;
	
	@BeforeEach
	void setUp() throws Exception {
		graph1 = new Graph<Integer>(5);
		graph1.addNode(1);
		graph1.addNode(2);
		graph1.addNode(3);
		graph1.addNode(4);
		graph1.addNode(5);
		graph1.addEdge(1, 2, 1);
		graph1.addEdge(1, 4, 3);
		graph1.addEdge(1, 5, 10);
		graph1.addEdge(2, 3, 5);
		graph1.addEdge(3, 5, 1);
		graph1.addEdge(4, 3, 2);
		graph1.addEdge(4, 5, 6);
		
		fullGraph = new Graph<Integer>(6);
		fullGraph.addNode(1);
		fullGraph.addNode(2);
		fullGraph.addNode(3);
		fullGraph.addNode(4);
		fullGraph.addNode(5);
		fullGraph.addNode(6);
		fullGraph.addEdge(1, 2, 3);
		fullGraph.addEdge(1, 3, 4);
		fullGraph.addEdge(1, 5, 8);
		fullGraph.addEdge(2, 5, 5);
		fullGraph.addEdge(3, 5, 3);
		fullGraph.addEdge(5, 4, 7);
		fullGraph.addEdge(5, 6, 3);
		fullGraph.addEdge(6, 4, 2);
		
		
		INF=Double.POSITIVE_INFINITY; 
	}

	@Test
	public void test1() {
		fullGraph.floyd();
		Assert.assertArrayEquals(new double[][] {{0,3,4,12,7,10},
												{INF,0,INF,10,5,8},
												{INF,INF,0,8,3,6},
												{INF,INF,INF,0,INF,INF},
												{INF,INF,INF,5,0,3},
												{INF,INF,INF,2,INF,0}},
				fullGraph.getFloydA());
		Assert.assertArrayEquals(new Object[][] {{2,null,null,6,3,5},
												{null,null,null,6,null,5},
												{null,null,null,6,null,5},
												{null,null,null,null,null,null},
												{null,null,null,6,null,null},
												{null,null,null,null,null,null},},
				fullGraph.getFloydP());
	}

}
